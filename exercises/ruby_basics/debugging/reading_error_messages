code:
def find_first_nonzero_among(numbers)
  numbers.each do |n|
    return n if n.nonzero?
  end
end

# Examples

find_first_nonzero_among(0, 0, 1, 0, 2, 0)
find_first_nonzero_among(1)

errors:
irb(main):009:0> find_first_nonzero_among(0, 0, 1, 0, 2, 0)
Traceback (most recent call last):
        5: from /home/zaika/.rbenv/versions/2.7.0/bin/irb:23:in `<main>'
        4: from /home/zaika/.rbenv/versions/2.7.0/bin/irb:23:in `load'
        3: from /home/zaika/.rbenv/versions/2.7.0/lib/ruby/gems/2.7.0/gems/irb-1.2.1/exe/irb:11:in `<top (required)>'
        2: from (irb):8
        1: from (irb):1:in `find_first_nonzero_among'
ArgumentError (wrong number of arguments (given 6, expected 1))

Error raised is ArgumentError - the method call expects one argument and was passed six. Method defined on line 1 of code (bottom of stacktrace - from IRB environment, line one, 'find_first_nonzero_among'; next line shows method was called on line 8 of IRB)

irb(main):010:0> find_first_nonzero_among(1)
Traceback (most recent call last):
        6: from /home/zaika/.rbenv/versions/2.7.0/bin/irb:23:in `<main>'
        5: from /home/zaika/.rbenv/versions/2.7.0/bin/irb:23:in `load'
        4: from /home/zaika/.rbenv/versions/2.7.0/lib/ruby/gems/2.7.0/gems/irb-1.2.1/exe/irb:11:in `<top (required)>'
        3: from (irb):9
        2: from (irb):10:in `rescue in irb_binding'
        1: from (irb):2:in `find_first_nonzero_among'
NoMethodError (undefined method `each' for 1:Integer)

Error raised is NoMethodError - 'each' is called on an Integer, and Integer class does not have defined 'each' method. Again stacktrace shows method definition as first call (bottom line of error message), with the method call that raised the error on line 9 of IRB. This example passed a single integer to 'find_first_nonzero_among', which is written to expect an enumerable argument (to call Enumerable#each)
